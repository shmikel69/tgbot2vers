
// Initialize Telegram Web App compatibility
let tg = window.Telegram && window.Telegram.WebApp;
if (tg) {
    tg.expand();
    tg.ready();
}

// DOM Elements
const levelValue = document.getElementById("level-value");
const xpValue = document.getElementById("xp-value");
const xpNextLevel = document.getElementById("xp-next-level");
const xpFill = document.getElementById("xp-fill");
const livesContainer = document.getElementById("lives-container");
const intelligenceValue = document.getElementById("intelligence-value");
const sportsValue = document.getElementById("sports-value");
const languagesValue = document.getElementById("languages-value");
const energyValue = document.getElementById("energy-value");
const creativityValue = document.getElementById("creativity-value");
const healthValue = document.getElementById("health-value");
const customizeButton = document.getElementById("customize-button");
const petButton = document.getElementById("pet-button");
const customizationModal = document.getElementById("customization-modal");
const closeModal = customizationModal ? customizationModal.querySelector(".close") : null; // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
const modalContent = customizationModal ? customizationModal.querySelector(".customization-content") : null;
const characterContainer = document.getElementById("character-base");
const petDisplayContainer = document.getElementById("pet-display");
const petBaseElement = document.getElementById("pet-base");
const buffsContainer = document.getElementById('buffs-container');
const equipmentSlotsContainer = document.querySelector(".equipment-container"); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤

// User data (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
let userData = {};

// Character customization options (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
const characterOptions = {
    skin: ['light', 'medium', 'dark', 'fantasy'],
    outfit: ['none', 'casual', 'formal', 'warrior', 'mage'], // –î–æ–±–∞–≤–ª–µ–Ω 'none'
    headgear: ['none', 'hat', 'crown', 'helmet'],
    weapon: ['none', 'sword', 'staff', 'bow']
};

// Pet customization options (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
const petOptions = {
    type: ['cat', 'dog', 'dragon', 'bird'],
    color: ['default', 'black', 'white', 'gold', 'blue'],
    accessory: ['none', 'bow', 'hat', 'glasses']
};

// Room items and their buffs (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ–∫—Ü–∏–∏ –±–∞—Ñ—Ñ–æ–≤)
const roomItemBuffs = {
    bed: { buff: 'Energy +10%', buffIcon: 'üí§' },
    desk: { buff: 'Intelligence +5%', buffIcon: 'üìù' },
    bookshelf: { buff: 'Intelligence +10%', buffIcon: 'üìö' },
    plant: { buff: 'Health +5%', buffIcon: 'üåø' },
    poster: { buff: 'Creativity +8%', buffIcon: 'üé®' },
    lamp: { buff: 'Energy +5%', buffIcon: 'üí°' },
    rug: { buff: 'Comfort +10%', buffIcon: 'üß∂' }, // –ë–∞—Ñ—Ñ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –º–æ–∂–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å —Å–æ —Å—Ç–∞—Ç–æ–º
    computer: { buff: 'Intelligence +8%, Creativity +5%', buffIcon: 'üíª' }
};


// --- Data Management ---

function loadUserData() {
    const savedData = localStorage.getItem('brainTrainingUserData');
    if (savedData) {
        try {
            userData = JSON.parse(savedData);
            // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            userData.stats = userData.stats || { intelligence: 10, sports: 5, languages: 3, energy: 8, creativity: 7, health: 10 };
            userData.equipment = userData.equipment || { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' };
            userData.pet = userData.pet || { unlocked: false, type: 'cat', color: 'default', accessory: 'none', abilities: { loyalty: 50, intelligence: 70, speed: 60, strength: 40 } };
            userData.achievements = userData.achievements || { memoryMaster: false, mathWizard: false, dailyStreak: false };
            userData.inventory = userData.inventory || [];
            userData.room = userData.room || { theme: 'default', items: [] };
            userData.level = userData.level || 1;
            userData.xp = userData.xp || 0;
            userData.lives = userData.lives === undefined ? 5 : userData.lives;

        } catch (e) {
            console.error("Error parsing user data:", e);
            setDefaultUserDataStats(); // –°–±—Ä–æ—Å –∫ –¥–µ—Ñ–æ–ª—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
    } else {
        setDefaultUserDataStats();
    }
    console.log("User data loaded for stats page:", userData);
}

function setDefaultUserDataStats() {
    userData = {
        level: 1, xp: 0, lives: 5, lastPlayed: new Date(0),
        stats: { intelligence: 10, sports: 5, languages: 3, energy: 8, creativity: 7, health: 10 },
        equipment: { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' },
        pet: { unlocked: false, type: 'cat', color: 'default', accessory: 'none', abilities: { loyalty: 50, intelligence: 70, speed: 60, strength: 40 } },
        achievements: { memoryMaster: false, mathWizard: false, dailyStreak: false },
        inventory: [], room: { theme: 'default', items: [] }
    };
    saveUserData();
}

function saveUserData() {
    try {
        localStorage.setItem('brainTrainingUserData', JSON.stringify(userData));
        console.log("User data saved.");
    } catch (e) {
        console.error("Error saving user data:", e);
    }
}

// --- UI Updates ---

function updateStatsDisplay() {
    if (!userData) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö

    // Level and XP
    const currentLevel = userData.level || 1;
    const currentXP = userData.xp || 0;
    const xpForNext = currentLevel * 100;
    if (levelValue) levelValue.textContent = currentLevel;
    if (xpValue) xpValue.textContent = currentXP;
    if (xpNextLevel) xpNextLevel.textContent = xpForNext;
    if (xpFill) {
        const xpPercentage = Math.min(100, (currentXP / xpForNext) * 100);
        xpFill.style.width = `${xpPercentage}%`;
    }

    // Lives
    if (livesContainer) {
        livesContainer.innerHTML = '';
        const currentLives = userData.lives === undefined ? 5 : userData.lives;
        for (let i = 0; i < Math.max(0, currentLives); i++) {
            const lifeIcon = document.createElement("div");
            lifeIcon.className = "life-icon";
            lifeIcon.textContent = "‚ù§Ô∏è";
            livesContainer.appendChild(lifeIcon);
        }
         // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–µ—Ä—ã–µ —Å–µ—Ä–¥—Ü–∞ –¥–ª—è –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –∂–∏–∑–Ω–µ–π (–¥–æ 5)
        for (let i = 0; i < 5 - Math.max(0, currentLives); i++) {
            const lifeIcon = document.createElement("div");
            lifeIcon.className = "life-icon";
            lifeIcon.textContent = "üñ§"; // –ò–ª–∏ "ü§ç"
            lifeIcon.style.opacity = "0.5";
            livesContainer.appendChild(lifeIcon);
        }
    }

    // Attributes
    const stats = userData.stats || {};
    updateAttributeBar('intelligence', stats.intelligence || 0);
    updateAttributeBar('sports', stats.sports || 0);
    updateAttributeBar('languages', stats.languages || 0);
    updateAttributeBar('energy', stats.energy || 0);
    updateAttributeBar('creativity', stats.creativity || 0);
    updateAttributeBar('health', stats.health || 0);

    // Update achievements
    updateAchievements();

    // Update buffs from room
    updateBuffsDisplay();
}

function updateAttributeBar(attribute, value) {
    const valueElement = document.getElementById(`${attribute}-value`);
    const fillElement = document.querySelector(`.${attribute}-fill`);
    if (!valueElement || !fillElement) return;

    valueElement.textContent = value;
    const maxValue = 100; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–∞–∫—Å–∏–º—É–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const percentage = Math.min(100, Math.max(0,(value / maxValue) * 100));

    // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —à–∏—Ä–∏–Ω—ã
    fillElement.style.width = `${percentage}%`;
}

function updateAchievements() {
    const achievements = userData.achievements || {};
    updateAchievementStatus('memory', achievements.memoryMaster);
    updateAchievementStatus('math', achievements.mathWizard);
    updateAchievementStatus('streak', achievements.dailyStreak);
}

function updateAchievementStatus(id, unlocked) {
    const element = document.getElementById(`achievement-${id}`);
    if (element) {
        if (unlocked) {
            element.classList.remove('locked');
            element.classList.add('unlocked');
        } else {
            element.classList.remove('unlocked');
            element.classList.add('locked');
        }
    }
}

function updateBuffsDisplay() {
    if (!buffsContainer || !userData.room || !userData.room.items) {
        if(buffsContainer) buffsContainer.innerHTML = '<div class="no-buffs">No active buffs</div>';
        return;
    }

    const activeItems = userData.room.items;
    buffsContainer.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞

    if (activeItems.length === 0) {
        buffsContainer.innerHTML = '<div class="no-buffs">Add items to your room for buffs!</div>';
        return;
    }

    let hasBuffs = false;
    activeItems.forEach(itemName => {
        const itemData = roomItemBuffs[itemName];
        if (itemData) {
            hasBuffs = true;
            const buffItem = document.createElement('div');
            buffItem.className = 'buff-item';
            buffItem.innerHTML = `
                <div class="buff-icon">${itemData.buffIcon}</div>
                <div class="buff-text">${itemData.buff}</div>
            `;
            buffsContainer.appendChild(buffItem);
        }
    });

    if (!hasBuffs) {
        buffsContainer.innerHTML = '<div class="no-buffs">No active buffs from room items.</div>';
    }
}

// Update Equipment Slots UI
function loadEquipmentSlots() {
     if (!equipmentSlotsContainer || !userData.equipment) return;

     const equipment = userData.equipment;
     equipmentSlotsContainer.querySelectorAll('.equipment-slot').forEach(slot => {
        const slotType = slot.getAttribute("data-slot"); // outfit, headgear, weapon, skin
        const iconElement = slot.querySelector(".slot-icon");
        const currentItem = equipment[slotType];

        if (iconElement) {
            if (currentItem && currentItem !== 'none') {
                iconElement.classList.remove("empty");
                iconElement.classList.add("equipped");
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
                const itemIcons = { 'sword': 'üó°Ô∏è', 'staff': 'üîÆ', 'bow': 'üèπ', 'helmet': 'üõ°Ô∏è', 'crown': 'üëë', 'hat': 'üé©', 'casual': 'üëï', 'formal': 'üëî', 'warrior': '‚öîÔ∏è', 'mage': '‚ú®', 'light': '‚ö™', 'medium': 'üü†', 'dark': '‚ö´', 'fantasy': 'üü¢' };
                iconElement.textContent = itemIcons[currentItem] || currentItem[0].toUpperCase();
                 // –°–∫–∏–Ω –¥–µ–ª–∞–µ–º –Ω–µ–∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –¥–ª—è —Å–Ω—è—Ç–∏—è
                 slot.style.cursor = (slotType === 'skin') ? 'default' : 'pointer';
            } else if (slotType !== 'skin') { // –ù–µ —Å–∫–∏–Ω –∏ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω
                iconElement.classList.remove("equipped");
                iconElement.classList.add("empty");
                iconElement.textContent = "?";
                slot.style.cursor = 'pointer';
            }
        }
     });
}

// Update Character Appearance
function updateCharacterAppearance() {
    if (!characterContainer || !userData.equipment) return;

    const equipment = userData.equipment;
    characterContainer.className = 'character-container'; // Reset

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ —Å—Ç–∏–ª–µ–π (character.css / style.css)
    characterContainer.classList.add(`skin-${equipment.skin || 'light'}`);
    if (equipment.outfit && equipment.outfit !== 'none') {
        characterContainer.classList.add(`outfit-${equipment.outfit}`);
    }
    if (equipment.headgear && equipment.headgear !== 'none') {
        characterContainer.classList.add(`headgear-${equipment.headgear}`);
    }
    if (equipment.weapon && equipment.weapon !== 'none') {
        characterContainer.classList.add(`weapon-${equipment.weapon}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–∏ (–∏–∑ character.css)
     characterContainer.innerHTML = `
        <div id="char-body" class="char-layer"></div>
        <div id="char-outfit" class="char-layer"></div>
        <div id="char-head" class="char-layer"></div>
        <div id="char-face" class="char-layer">
            <div id="char-mouth"></div>
        </div>
        <div id="char-headgear" class="char-layer"></div>
        <div id="char-weapon" class="char-layer"></div>
    `;
}

// Update Pet Appearance
function updatePetAppearance() {
    if (!petDisplayContainer || !petBaseElement || !userData.pet) return;

    const pet = userData.pet;
    if (pet.unlocked) {
        petDisplayContainer.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ç–∞
        petBaseElement.className = 'pet-container'; // Reset

        petBaseElement.classList.add(`pet-type-${pet.type || 'cat'}`);
        petBaseElement.classList.add(`pet-color-${pet.color || 'default'}`);
        if (pet.accessory && pet.accessory !== 'none') {
            petBaseElement.classList.add(`pet-accessory-${pet.accessory}`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–∏ –ø–µ—Ç–∞
        petBaseElement.innerHTML = `
            <div id="pet-body" class="pet-layer"></div>
            <div id="pet-head" class="pet-layer"></div>
            <div id="pet-face" class="pet-layer">
                <div id="pet-mouth"></div>
            </div>
            <div id="pet-accessory" class="pet-layer"></div>
        `;

    } else {
        petDisplayContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ç–∞
    }
}

// --- Customization Modal ---

function openCustomizationModal(type) {
    if (!customizationModal || !modalContent) return;

     // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    const closeBtn = modalContent.querySelector(".close");
    const title = modalContent.querySelector("h2");
    const saveBtn = document.getElementById('save-customization'); // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    modalContent.innerHTML = ''; // –û—á–∏—â–∞–µ–º –≤—Å—ë
    if (closeBtn) modalContent.appendChild(closeBtn); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    if (title) modalContent.appendChild(title); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (saveBtn) modalContent.appendChild(saveBtn); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    if (type === 'character') {
        title.textContent = "Character Customization";
        populateCharacterOptions();
    } else if (type === 'pet') {
        title.textContent = "Pet Customization";
        populatePetOptions();
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    customizationModal.style.display = "block";

    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏
    if (saveBtn) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –±—ã–ª
        saveBtn.replaceWith(saveBtn.cloneNode(true));
        const newSaveBtn = document.getElementById('save-customization'); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        if (newSaveBtn) {
            newSaveBtn.addEventListener('click', () => {
                customizationModal.style.display = "none"; // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                // –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ–ø—Ü–∏—é
            });
        }
    }
}


function populateCharacterOptions() {
     if (!modalContent) return;
     const saveBtn = document.getElementById('save-customization'); // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

    for (const [category, options] of Object.entries(characterOptions)) {
        const section = document.createElement("div");
        section.className = "customization-section";

        const sectionTitle = document.createElement("h3");
        sectionTitle.textContent = category.charAt(0).toUpperCase() + category.slice(1);
        section.appendChild(sectionTitle);

        const optionsContainer = document.createElement("div");
        optionsContainer.className = "options-container";

        options.forEach(option => {
            const optionButton = document.createElement("button");
            optionButton.className = "option-button";
            if (userData.equipment[category] === option) {
                optionButton.classList.add("selected");
            }
            optionButton.textContent = option.charAt(0).toUpperCase() + option.slice(1);
            optionButton.setAttribute("data-category", category);
            optionButton.setAttribute("data-option", option);

            // –°–∫–∏–Ω –Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å 'none'
            if (category === 'skin' && option === 'none') {
               optionButton.disabled = true;
               optionButton.style.opacity = '0.5';
               optionButton.style.cursor = 'not-allowed';
            } else {
                 optionButton.addEventListener("click", handleCharacterOptionSelect);
            }


            optionsContainer.appendChild(optionButton);
        });

        section.appendChild(optionsContainer);
         // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π "Save Changes"
        if (saveBtn) {
            modalContent.insertBefore(section, saveBtn);
        } else {
            modalContent.appendChild(section); // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        }
    }
}

function handleCharacterOptionSelect(event) {
     const button = event.target;
     const category = button.getAttribute("data-category");
     const option = button.getAttribute("data-option");

     // –û–±–Ω–æ–≤–ª—è–µ–º userData
     userData.equipment[category] = option;

     // –û–±–Ω–æ–≤–ª—è–µ–º UI –º–æ–¥–∞–ª–∫–∏
     document.querySelectorAll(`.option-button[data-category="${category}"]`).forEach(btn => {
         btn.classList.remove("selected");
     });
     button.classList.add("selected");

     // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–ª–æ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
     updateCharacterAppearance();
     loadEquipmentSlots();

     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–∞–∑—É
     saveUserData();
}


function populatePetOptions() {
     if (!modalContent) return;
     const saveBtn = document.getElementById('save-customization');

    if (!userData.pet || !userData.pet.unlocked) {
        const petLockedMessage = document.createElement("div");
        petLockedMessage.className = "pet-locked-message"; // –°—Ç–∏–ª—å –∏–∑ style.css –¥–ª—è –º–æ–¥–∞–ª–∫–∏
        petLockedMessage.style.textAlign = 'center';
        petLockedMessage.style.padding = '20px';
        petLockedMessage.innerHTML = `
            <div style="font-size: 3em; margin-bottom: 10px;">üîí</div>
            <p>Unlock a pet from the inventory first!</p>
            <button id="unlock-pet-demo" class="action-button" style="margin-top: 15px;">Unlock Demo Pet</button>
        `;
         // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (saveBtn) {
            modalContent.insertBefore(petLockedMessage, saveBtn);
        } else {
            modalContent.appendChild(petLockedMessage);
        }

        // –î–µ–º–æ-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (—É–±—Ä–∞—Ç—å –≤ —Ä–µ–ª–∏–∑–µ)
        const unlockDemoButton = modalContent.querySelector("#unlock-pet-demo");
        if (unlockDemoButton) {
            unlockDemoButton.addEventListener("click", () => {
                userData.pet.unlocked = true;
                saveUserData();
                updatePetAppearance(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ –ø–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç–æ–≤
                openCustomizationModal('pet'); // –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É–∂–µ —Å –æ–ø—Ü–∏—è–º–∏
            });
        }
        return; // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –ø–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    for (const [category, options] of Object.entries(petOptions)) {
         const section = document.createElement("div");
         section.className = "customization-section";
         // ... (–∫–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –≤ populateCharacterOptions) ...
          const sectionTitle = document.createElement("h3");
         sectionTitle.textContent = category.charAt(0).toUpperCase() + category.slice(1);
         section.appendChild(sectionTitle);

         const optionsContainer = document.createElement("div");
         optionsContainer.className = "options-container";

         options.forEach(option => {
             const optionButton = document.createElement("button");
             optionButton.className = "option-button";
             if (userData.pet[category] === option) {
                 optionButton.classList.add("selected");
             }
             optionButton.textContent = option.charAt(0).toUpperCase() + option.slice(1);
             optionButton.setAttribute("data-category", category);
             optionButton.setAttribute("data-option", option);
             optionButton.addEventListener("click", handlePetOptionSelect); // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ç–∞
             optionsContainer.appendChild(optionButton);
         });
         section.appendChild(optionsContainer);
          if (saveBtn) {
             modalContent.insertBefore(section, saveBtn);
         } else {
             modalContent.appendChild(section);
         }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–æ–≤ –ø–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
    const abilitiesSection = document.createElement("div");
    abilitiesSection.className = "customization-section";
    abilitiesSection.innerHTML = `<h3>Pet Abilities (View Only)</h3>`;
    const abilitiesGrid = document.createElement("div");
    abilitiesGrid.className = "attributes-grid"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å —á—Ç–æ –∏ –¥–ª—è —Å—Ç–∞—Ç–æ–≤ –ø–µ—Ä—Å–∞
    const abilities = userData.pet.abilities || {};
    for (const [name, value] of Object.entries(abilities)) {
        const abilityDiv = document.createElement('div');
        abilityDiv.className = 'attribute'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∞—Ç—Ä–∏–±—É—Ç–∞
        abilityDiv.innerHTML = `
            <div class="attribute-name">${name.charAt(0).toUpperCase() + name.slice(1)}</div>
            <div class="attribute-bar"><div class="attribute-fill" style="width: ${value}%; background-color: #f39c12;"></div></div>
            <div class="attribute-value">${value}</div>
        `;
        abilitiesGrid.appendChild(abilityDiv);
    }
    abilitiesSection.appendChild(abilitiesGrid);
    if (saveBtn) {
        modalContent.insertBefore(abilitiesSection, saveBtn);
    } else {
        modalContent.appendChild(abilitiesSection);
    }
}

function handlePetOptionSelect(event) {
     const button = event.target;
     const category = button.getAttribute("data-category");
     const option = button.getAttribute("data-option");

     userData.pet[category] = option;

     document.querySelectorAll(`.option-button[data-category="${category}"]`).forEach(btn => {
         btn.classList.remove("selected");
     });
     button.classList.add("selected");

     updatePetAppearance(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ –ø–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
     saveUserData();
}

// --- Event Listeners ---

if (customizeButton) {
    customizeButton.addEventListener("click", () => openCustomizationModal('character'));
}
if (petButton) {
    petButton.addEventListener("click", () => openCustomizationModal('pet'));
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
if (closeModal) {
    closeModal.addEventListener("click", () => {
        if (customizationModal) customizationModal.style.display = "none";
    });
}
window.addEventListener("click", (event) => {
    if (event.target === customizationModal) {
        customizationModal.style.display = "none";
    }
});

// –ö–ª–∏–∫–∏ –ø–æ —Å–ª–æ—Ç–∞–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
if (equipmentSlotsContainer) {
    equipmentSlotsContainer.addEventListener('click', (event) => {
        const slot = event.target.closest('.equipment-slot');
        const slotType = slot ? slot.getAttribute('data-slot') : null;
        // –ó–∞–ø—Ä–µ—â–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Å–∫–∏–Ω
        if (slot && slotType !== 'skin') {
            openCustomizationModal('character');
        }
    });
}


// --- Initialization ---

window.onload = function() {
    loadUserData();
    updateStatsDisplay();
    loadEquipmentSlots(); // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω
    updateCharacterAppearance();
    updatePetAppearance();

    // –¢–µ–º–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –≤ HTML
};
