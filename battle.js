
// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
let battleInProgress = false;
let playerCurrentHealth = 100;
let enemyCurrentHealth = 100;
let playerMaxHealth = 100; // –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ –±–∞—Ñ—Ñ–æ–º
let enemyMaxHealth = 100;
let currentEnemy = null;
let enemyAttackInterval = null;
let healingOrbInterval = null;
let clickCooldown = false;
const clickCooldownTime = 75; // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
let battleRewards = [];

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–∫–∞ (–±–∞–∑–æ–≤—ã–µ, –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã)
let playerBaseDamage = 10;
let playerBaseDefense = 1;
let playerHealAmount = 20;
let playerCritChance = 0.05; // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞ 5%
let playerAccuracy = 1.0; // –ë–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 100%

// DOM Elements (–ø–æ–ª—É—á–∞–µ–º —Å–Ω–æ–≤–∞, —Ç.–∫. —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const battleContainer = document.getElementById('battle-container');
const quizContainer = document.getElementById('battle-quiz-container'); // –î–ª—è —Å–∫—Ä—ã—Ç–∏—è/–ø–æ–∫–∞–∑–∞
const battleMessages = document.getElementById('battle-messages');
const playerHealthElement = document.getElementById('player-health');
const enemyHealthElement = document.getElementById('enemy-health');
const enemyNameElement = document.getElementById('enemy-name');
const enemyLevelElement = document.getElementById('enemy-level');
const enemyTypeElement = document.getElementById('enemy-type');
const enemyCharacterElement = document.getElementById('enemy-character');
const playerCharacterElement = document.getElementById('player-character');
const healingOrbElement = document.getElementById('healing-orb');
const backToMenuButton = document.getElementById('back-to-menu'); // –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥

// Enemy definitions (–î–æ–±–∞–≤–ª–µ–Ω –ö–∏–±–µ—Ä–≤–æ–ª–∫)
const enemies = [
    { name: 'Slime', type: 'Normal', level: 1, health: 80, attack: 5, defense: 1, attackSpeed: 500, cssClass: 'enemy-slime', rewards: { xp: 15, items: [{ name: 'Slime Goo', icon: 'üß™', chance: 0.6 }, { name: 'Potion', icon: 'üíß', chance: 0.2 }] } },
    { name: 'Goblin', type: 'Forest', level: 2, health: 100, attack: 7, defense: 2, attackSpeed: 450, cssClass: 'enemy-goblin', rewards: { xp: 25, items: [{ name: 'Goblin Ear', icon: 'üëÇ', chance: 0.5 }, { name: 'Coins', icon: 'üí∞', chance: 0.4 }] } },
    { name: 'Ghost', type: 'Ethereal', level: 3, health: 120, attack: 8, defense: 3, attackSpeed: 480, cssClass: 'enemy-ghost', rewards: { xp: 35, items: [{ name: 'Ectoplasm', icon: 'üëª', chance: 0.4 }, { name: 'Scroll', icon: 'üìú', chance: 0.3 }] } },
    // –î–æ–±–∞–≤–ª—è–µ–º –ö–∏–±–µ—Ä–≤–æ–ª–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Å—Å–æ–º)
    { name: 'Cyberwolf', type: 'Tech', level: 5, health: 180, attack: 12, defense: 4, attackSpeed: 400, cssClass: 'enemy-cyberwolf', rewards: { xp: 70, items: [{ name: 'Circuit', icon: '‚öôÔ∏è', chance: 0.5 }, { name: 'Energy Cell', icon: 'üîã', chance: 0.3 }] } },
    { name: 'Dragon', type: 'Fire', level: 8, health: 250, attack: 15, defense: 6, attackSpeed: 550, cssClass: 'enemy-dragon', rewards: { xp: 120, items: [{ name: 'Dragon Scale', icon: 'üî•', chance: 0.6 }, { name: 'Fire Crystal', icon: 'üíé', chance: 0.4 }] } },
    { name: 'Dark Lord', type: 'Boss', level: 10, health: 400, attack: 20, defense: 8, attackSpeed: 600, cssClass: 'enemy-boss', rewards: { xp: 250, items: [{ name: 'Shadow Orb', icon: 'üîÆ', chance: 0.8 }, { name: 'Dark Armor Piece', icon: 'üõ°Ô∏è', chance: 0.5 }, { name: 'Legendary Shard', icon: '‚öîÔ∏è', chance: 0.3 }] } }
];


// Load user data (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è)
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç –∏–ª–∏ –æ–±—â—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
function loadUserDataBattle() {
    const savedData = localStorage.getItem('brainTrainingUserData');
    if (savedData) {
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –ø–µ—Ä–µ–¥ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            const parsedData = JSON.parse(savedData);
            if (!parsedData.stats) parsedData.stats = {};
             if (!parsedData.equipment) parsedData.equipment = { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' };
             if (!parsedData.inventory) parsedData.inventory = [];
             if (!parsedData.room) parsedData.room = { theme: 'default', items: [] };
             if (parsedData.level === undefined) parsedData.level = 1;
             if (parsedData.xp === undefined) parsedData.xp = 0;
             if (parsedData.lives === undefined) parsedData.lives = 5;
            return parsedData;
        } catch(e) {
            console.error("Error parsing user data in battle.js:", e);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
             return { level: 1, xp: 0, lives: 5, stats: { intelligence: 10, sports: 5, health: 10 }, equipment: { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' }, inventory: [] };
        }
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –≤ localStorage –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
    return { level: 1, xp: 0, lives: 5, stats: { intelligence: 10, sports: 5, health: 10 }, equipment: { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' }, inventory: [] };
}

// Save user data
function saveUserDataBattle(userData) {
     localStorage.setItem('brainTrainingUserData', JSON.stringify(userData));
}


// Update the player character appearance in battle
function updatePlayerAppearanceBattle() {
    const userData = loadUserDataBattle();
    const equipment = userData.equipment || {}; // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ equipment —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    if (!playerCharacterElement) return;

    // –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã
    playerCharacterElement.className = 'character-container'; // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–Ω
    playerCharacterElement.classList.add(`skin-${equipment.skin || 'light'}`);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–¥–µ–∂–¥—É
    if (equipment.outfit && equipment.outfit !== 'none') {
        playerCharacterElement.classList.add(`outfit-${equipment.outfit}`);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä
    if (equipment.headgear && equipment.headgear !== 'none') {
        playerCharacterElement.classList.add(`headgear-${equipment.headgear}`);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ä—É–∂–∏–µ
    if (equipment.weapon && equipment.weapon !== 'none') {
        playerCharacterElement.classList.add(`weapon-${equipment.weapon}`);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–∏–∑ character.css)
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å
     playerCharacterElement.innerHTML = `
        <div id="player-body" class="char-layer"></div>
        <div id="player-outfit" class="char-layer"></div>
        <div id="player-head" class="char-layer"></div>
        <div id="player-face" class="char-layer">
            <div id="player-mouth"></div>
        </div>
        <div id="player-headgear" class="char-layer"></div>
        <div id="player-weapon" class="char-layer"></div>
    `;
     console.log("Player appearance updated with classes:", playerCharacterElement.className);
}

// Calculate player stats based on base values, stats, equipment, and buffs
function calculatePlayerStatsBattle(userData, battleEffect) {
    let calculatedDamage = playerBaseDamage;
    let calculatedDefense = playerBaseDefense;
    let calculatedHeal = playerHealAmount;
    let calculatedCritChance = playerCritChance;
    let calculatedAccuracy = playerAccuracy;
    let calculatedMaxHealth = playerMaxHealth;
    let enemySpeedMultiplier = 1.0; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ä–∞–≥–∞ (–¥–ª—è –¥–µ–±–∞—Ñ—Ñ–∞)

    // 1. –£—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞
    calculatedDamage += Math.floor((userData.stats.sports || 0) / 2);
    calculatedDefense += Math.floor((userData.stats.health || 0) / 5);
    calculatedHeal += Math.floor((userData.stats.intelligence || 0) / 3);
    calculatedCritChance += (userData.stats.creativity || 0) * 0.002; // –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–∞–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∞
    calculatedMaxHealth += (userData.stats.health || 0) * 2; // –ó–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å. HP

    // 2. –£—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
    const equipment = userData.equipment || {};
    // –û—Ä—É–∂–∏–µ
    if (equipment.weapon === 'sword') calculatedDamage += 5;
    else if (equipment.weapon === 'staff') { calculatedDamage += 3; calculatedHeal += 5; }
    else if (equipment.weapon === 'bow') { calculatedDamage += 4; calculatedCritChance += 0.05; }
    // –û–¥–µ–∂–¥–∞
    if (equipment.outfit === 'warrior') { calculatedDefense += 3; calculatedDamage += 2; calculatedMaxHealth += 15;}
    else if (equipment.outfit === 'mage') { calculatedDefense += 1; calculatedHeal += 8; calculatedMaxHealth += 5;}
    else if (equipment.outfit === 'formal') calculatedDefense += 2;
    // –ì–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä
    if (equipment.headgear === 'helmet') calculatedDefense += 2;
    else if (equipment.headgear === 'crown') { calculatedDamage += 2; calculatedCritChance += 0.02;}
    else if (equipment.headgear === 'hat') calculatedDefense += 1;

     // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞—Ñ—Ñ—ã/–¥–µ–±–∞—Ñ—Ñ—ã –∏–∑ –∫–≤–∏–∑–∞
     let quizEffectMessage = null;
     if (battleEffect) {
         console.log("Applying battle effect:", battleEffect);
         quizEffectMessage = `Quiz Effect: ${battleEffect.text}!`; // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ
         switch (battleEffect.type) {
             case 'damage':
                 calculatedDamage *= battleEffect.multiplier;
                 break;
             case 'healing':
                 calculatedHeal *= battleEffect.multiplier;
                 break;
             case 'defense':
                 calculatedDefense *= battleEffect.multiplier;
                 break;
             case 'health_boost':
                  calculatedMaxHealth += battleEffect.value;
                  break;
             case 'crit_chance':
                 calculatedCritChance += battleEffect.value;
                 break;
             case 'speed_debuff': // –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞–≥–∞
                 enemySpeedMultiplier = battleEffect.value;
                 break;
             // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
         }
     }

    // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    calculatedDamage = Math.max(1, Math.floor(calculatedDamage));
    calculatedDefense = Math.max(0, Math.floor(calculatedDefense));
    calculatedHeal = Math.max(1, Math.floor(calculatedHeal));
    calculatedMaxHealth = Math.max(10, Math.floor(calculatedMaxHealth)); // –ú–∏–Ω. –∑–¥–æ—Ä–æ–≤—å–µ

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—Ä–∞–≥–∞
     return {
         damage: calculatedDamage,
         defense: calculatedDefense,
         heal: calculatedHeal,
         critChance: Math.min(1, calculatedCritChance), // –ù–µ –±–æ–ª—å—à–µ 100%
         accuracy: calculatedAccuracy, // –ü–æ–∫–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
         maxHealth: calculatedMaxHealth,
         enemySpeedMultiplier: enemySpeedMultiplier,
         quizEffectMessage: quizEffectMessage
     };
}


// Set up a new enemy
function setupEnemy(playerLevel, speedMultiplier = 1.0) {
    // –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–∞–≥–∞, —É—Ä–æ–≤–µ–Ω—å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ —Å–∏–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
    const availableEnemies = enemies.filter(enemy => enemy.level <= playerLevel + 2);
    let selectedEnemyData;

    if (availableEnemies.length === 0) {
        // –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –≤—Ä–∞–≥–∞
        selectedEnemyData = { ...enemies[0] };
    } else {
        // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const randomIndex = Math.floor(Math.random() * availableEnemies.length);
        selectedEnemyData = { ...availableEnemies[randomIndex] }; // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Ä–∞–≥–∞
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç –¥–µ–±–∞—Ñ—Ñ–∞ –∫–≤–∏–∑–∞
    // –£–º–µ–Ω—å—à–∞–µ–º attackSpeed (–∏–Ω—Ç–µ—Ä–≤–∞–ª), –µ—Å–ª–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å > 1 (–≤—Ä–∞–≥ –±—ã—Å—Ç—Ä–µ–µ)
    selectedEnemyData.attackSpeed = Math.max(100, Math.floor(selectedEnemyData.attackSpeed / speedMultiplier)); // –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª 100–º—Å

    currentEnemy = selectedEnemyData; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–∞–≥–∞

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞
    enemyMaxHealth = currentEnemy.health;
    enemyCurrentHealth = enemyMaxHealth;

    // –û–±–Ω–æ–≤–ª—è–µ–º UI –≤—Ä–∞–≥–∞
    if (enemyNameElement) enemyNameElement.textContent = currentEnemy.name;
    if (enemyLevelElement) enemyLevelElement.textContent = 'Level: ' + currentEnemy.level;
    if (enemyTypeElement) enemyTypeElement.textContent = 'Type: ' + currentEnemy.type;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –≤—Ä–∞–≥–∞
    if (enemyCharacterElement) {
        enemyCharacterElement.className = 'enemy-container ' + currentEnemy.cssClass;
    }
    console.log("Enemy setup:", currentEnemy.name, "Attack Speed:", currentEnemy.attackSpeed);
}

// Add a message to the battle log
function addBattleMessage(type, message) {
    if (!battleMessages) return;

    const messageElement = document.createElement('div');
    messageElement.className = `battle-message ${type}-message`;
    messageElement.textContent = message;
    battleMessages.appendChild(messageElement);

    // Auto-scroll to bottom
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    setTimeout(() => {
        battleMessages.scrollTop = battleMessages.scrollHeight;
    }, 50);
}

// Show damage number animation
function showDamageNumber(targetElement, amount, isHeal = false, isCrit = false) {
    if (!targetElement) return;

    const numberElement = document.createElement('div');
    numberElement.className = isHeal ? 'heal-number' : 'damage-number';
    numberElement.textContent = (isHeal ? '+' : '-') + amount;

    if (isCrit) {
        numberElement.textContent += 'üí•'; // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –∫—Ä–∏—Ç–∞
        numberElement.style.fontSize = '24px'; // –ö—Ä—É–ø–Ω–µ–µ –¥–ª—è –∫—Ä–∏—Ç–∞
        numberElement.style.color = isHeal ? '#00ff00' : '#ff4444'; // –Ø—Ä—á–µ —Ü–≤–µ—Ç –∫—Ä–∏—Ç–∞
        numberElement.style.fontWeight = 'bold';
    }

    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
    const targetRect = targetElement.getBoundingClientRect();
    const containerRect = battleContainer.getBoundingClientRect(); // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –±–æ—è
    const randomX = Math.random() * (targetRect.width * 0.6) + (targetRect.width * 0.2); // –°–ª—É—á–∞–π–Ω–æ –ø–æ —à–∏—Ä–∏–Ω–µ —Ü–µ–ª–∏
    const startY = targetRect.top - containerRect.top + targetRect.height * 0.3; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è Y

    numberElement.style.position = 'absolute'; // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ
    numberElement.style.left = `${targetRect.left - containerRect.left + randomX}px`;
    numberElement.style.top = `${startY}px`;

    battleContainer.appendChild(numberElement); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –±–æ—è

    // –ê–Ω–∏–º–∞—Ü–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    numberElement.animate([
        { transform: 'translateY(0) scale(1)', opacity: 1 },
        { transform: `translateY(-50px) scale(1.2)`, opacity: 0.8 }, // –ü–æ–¥—ä–µ–º –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
        { transform: `translateY(-80px) scale(0.8)`, opacity: 0 } // –ò—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
    ], {
        duration: 1200, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
        easing: 'ease-out'
    }).onfinish = () => {
        numberElement.remove(); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–∞
function updateHealthBar(element, current, max) {
    if (!element) return;
    const percentage = Math.max(0, Math.min(100, (current / max) * 100));
    element.style.width = percentage + '%';

    // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã —Ü–≤–µ—Ç–∞
    element.classList.remove('low', 'critical');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ü–≤–µ—Ç–∞
    if (percentage < 25) {
        element.classList.add('critical');
    } else if (percentage < 50) {
        element.classList.add('low');
    }
}

// Player attack function (triggered by clicking on enemy)
function playerAttack() {
    if (!battleInProgress || clickCooldown || !currentEnemy || enemyCurrentHealth <= 0 || playerCurrentHealth <= 0) return;

    clickCooldown = true;
    setTimeout(() => { clickCooldown = false; }, clickCooldownTime);

    // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –∏–≥—Ä–æ–∫–∞
    if (playerCharacterElement) {
        playerCharacterElement.classList.add('attack-animation');
        setTimeout(() => playerCharacterElement.classList.remove('attack-animation'), 300);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ (–æ–Ω–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
    const userData = loadUserDataBattle();
    const battleEffect = JSON.parse(localStorage.getItem('battleEffect') || 'null'); // –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–≤–∏–∑–∞
    const playerStats = calculatePlayerStatsBattle(userData, battleEffect);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–º–∞—Ö (–µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å < 100%)
    if (Math.random() > playerStats.accuracy) {
        addBattleMessage('system', "You missed!");
        showDamageNumber(enemyCharacterElement, 'Miss', false); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "Miss"
        return; // –ê—Ç–∞–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç
    const isCrit = Math.random() < playerStats.critChance;
    let damage = playerStats.damage;
    if (isCrit) {
        damage = Math.floor(damage * 1.5); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–Ω –ø—Ä–∏ –∫—Ä–∏—Ç–µ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 2x)
    }

     // –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–Ω –Ω–∞ –∑–∞—â–∏—Ç—É –≤—Ä–∞–≥–∞ (–∑–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç)
    const enemyDefenseFactor = 1 - Math.min(0.8, (currentEnemy.defense || 0) * 0.05); // –ó–∞—â–∏—Ç–∞ —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω, –º–∞–∫—Å 80%
    damage = Math.max(1, Math.floor(damage * enemyDefenseFactor));

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–æ–º
    if (enemyCharacterElement) {
        enemyCharacterElement.classList.add('damaged-animation');
        setTimeout(() => enemyCharacterElement.classList.remove('damaged-animation'), 300);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ —É—Ä–æ–Ω–∞
    showDamageNumber(enemyCharacterElement, damage, false, isCrit);

    // –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞
    enemyCurrentHealth = Math.max(0, enemyCurrentHealth - damage);
    updateHealthBar(enemyHealthElement, enemyCurrentHealth, enemyMaxHealth);
    // addBattleMessage('player', `You hit ${currentEnemy.name} for ${damage} damage` + (isCrit ? ' (CRIT!)' : ''));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
    if (enemyCurrentHealth <= 0) {
        battleVictory();
    }
}


// Enemy attack function (automatic interval)
function enemyAttack() {
    if (!battleInProgress || !currentEnemy || enemyCurrentHealth <= 0 || playerCurrentHealth <= 0) {
       // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –µ—Å–ª–∏ –±–æ–π –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
       if (enemyAttackInterval) clearInterval(enemyAttackInterval);
       return;
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞
    if (enemyCharacterElement) {
        enemyCharacterElement.classList.add('attack-animation');
        setTimeout(() => enemyCharacterElement.classList.remove('attack-animation'), 300);
    }

     // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –∑–∞—â–∏—Ç—É)
    const userData = loadUserDataBattle();
    const battleEffect = JSON.parse(localStorage.getItem('battleEffect') || 'null');
    const playerStats = calculatePlayerStatsBattle(userData, battleEffect);

     // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞
    let damage = currentEnemy.attack || 5; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω –≤—Ä–∞–≥–∞
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥–∞
    damage = Math.floor(damage * (0.9 + Math.random() * 0.2)); // +/- 10% —É—Ä–æ–Ω–∞

    // –£—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –∏–≥—Ä–æ–∫–∞
    const playerDefenseFactor = 1 - Math.min(0.8, playerStats.defense * 0.05);
    damage = Math.max(1, Math.floor(damage * playerDefenseFactor));

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫–æ–º
     if (playerCharacterElement) {
        playerCharacterElement.classList.add('damaged-animation');
        setTimeout(() => playerCharacterElement.classList.remove('damaged-animation'), 300);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∏—Å–ª–æ —É—Ä–æ–Ω–∞
    showDamageNumber(playerCharacterElement, damage);

    // –£–º–µ–Ω—å—à–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞
    playerCurrentHealth = Math.max(0, playerCurrentHealth - damage);
    updateHealthBar(playerHealthElement, playerCurrentHealth, playerStats.maxHealth); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ maxHealth
    // addBattleMessage('enemy', `${currentEnemy.name} hits you for ${damage} damage!`);


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
    if (playerCurrentHealth <= 0) {
        battleDefeat();
    }
}

// Show healing orb
function showHealingOrb() {
    if (!battleInProgress || !healingOrbElement || !battleContainer) return;

    // Random position within the battle container
    const containerRect = battleContainer.getBoundingClientRect();
    const orbSize = 40;
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –æ—Ä–± –Ω–µ –≤—ã–ª–µ–∑–∞–ª –∑–∞ –∫—Ä–∞—è
    const maxX = containerRect.width - orbSize - 20; // 20px –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
    const maxY = containerRect.height - orbSize - 20; // 20px –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
    const minX = 20; // 20px –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
    const minY = 20; // 20px –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É


    const randomX = Math.floor(Math.random() * (maxX - minX) + minX);
    const randomY = Math.floor(Math.random() * (maxY - minY) + minY);

    healingOrbElement.style.left = randomX + 'px';
    healingOrbElement.style.top = randomY + 'px';
    healingOrbElement.style.display = 'flex';

    // Auto hide after 2 seconds
    setTimeout(() => {
        if (healingOrbElement.style.display !== 'none') {
            healingOrbElement.style.display = 'none';
        }
    }, 2000);
}

// Handle healing orb click
function healPlayer() {
    if (!battleInProgress || playerCurrentHealth <= 0 || !healingOrbElement) return;

    healingOrbElement.style.display = 'none'; // –°—Ä–∞–∑—É —Å–∫—Ä—ã–≤–∞–µ–º –æ—Ä–±

     // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ (–æ—Å–æ–±–µ–Ω–Ω–æ –ª–µ—á–µ–Ω–∏–µ)
    const userData = loadUserDataBattle();
    const battleEffect = JSON.parse(localStorage.getItem('battleEffect') || 'null');
    const playerStats = calculatePlayerStatsBattle(userData, battleEffect);
    const healValue = playerStats.heal;

    // –ù–µ –ª–µ—á–∏–º, –µ—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–ª–Ω–æ–µ
    if (playerCurrentHealth >= playerStats.maxHealth) return;

    const healedAmount = Math.min(healValue, playerStats.maxHealth - playerCurrentHealth); // –ù–µ –ª–µ—á–∏–º –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
    playerCurrentHealth += healedAmount;

    // Update health bar
    updateHealthBar(playerHealthElement, playerCurrentHealth, playerStats.maxHealth);

    // Show healing effect
    showDamageNumber(playerCharacterElement, healedAmount, true);
    addBattleMessage('player', `You healed for ${healedAmount} HP.`);
}

// --- Battle Outcome Functions ---

// –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
function endBattleCleanup() {
    console.log("Cleaning up battle intervals...");
    if (enemyAttackInterval) clearInterval(enemyAttackInterval);
    if (healingOrbInterval) clearInterval(healingOrbInterval);
    enemyAttackInterval = null;
    healingOrbInterval = null;
    battleInProgress = false;
    // –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–±
    if (healingOrbElement) healingOrbElement.style.display = 'none';
     // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Å –≤—Ä–∞–≥–∞, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –±–æ—è
    if (enemyCharacterElement) enemyCharacterElement.removeEventListener('click', playerAttack);
}

function battleVictory() {
    if (!battleInProgress) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ
     addBattleMessage('system', `You defeated the ${currentEnemy.name}!`);
    endBattleCleanup();

    // Calculate rewards
    calculateRewards();

    // Update user data
    const userData = loadUserDataBattle();
    let levelUp = false;

    // Add XP
    const xpGained = currentEnemy.rewards.xp || 10;
    userData.xp = (userData.xp || 0) + xpGained;
    addBattleMessage('reward', `üèÜ Gained ${xpGained} XP`);

    // Check for level up
    let xpForNextLevel = (userData.level || 1) * 100;
    while (userData.xp >= xpForNextLevel) {
        userData.level++;
        userData.xp -= xpForNextLevel;
        levelUp = true;
        addBattleMessage('system', `Level up! You are now level ${userData.level}!`);
        xpForNextLevel = userData.level * 100; // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è

        // Increase a random stat on level up
        const stats = ['intelligence', 'sports', 'languages', 'energy', 'creativity', 'health'];
        const randomStat = stats[Math.floor(Math.random() * stats.length)];
        userData.stats[randomStat] = (userData.stats[randomStat] || 0) + 1;
        addBattleMessage('system', `Your ${randomStat} increased by 1!`);
    }

    // Add items to inventory
    if (!userData.inventory) userData.inventory = [];
    battleRewards.forEach(reward => {
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
        const existingItem = userData.inventory.find(item => item.name === reward.name);
        if (existingItem && reward.type !== 'weapon') { // –û—Ä—É–∂–∏–µ –Ω–µ —Å—Ç–∞–∫–∞–µ–º
            existingItem.quantity = (existingItem.quantity || 1) + 1;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            userData.inventory.push({
                name: reward.name,
                icon: reward.icon,
                type: reward.type || 'item', // —Ç–∏–ø 'item' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                quantity: 1
            });
        }
    });

    saveUserDataBattle(userData);

    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏ –≤–æ–∑–º–æ–∂–Ω–æ "–ù–æ–≤—ã–π –±–æ–π"
     if(backToMenuButton) backToMenuButton.style.display = 'inline-block';
     // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "Fight Again"
     // setTimeout(initBattle, 3000); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –±–æ–π —á–µ—Ä–µ–∑ 3 —Å–µ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     // –ò–õ–ò –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "Fight Again"
     setTimeout(() => {
        addBattleMessage('system', 'Prepare for the next battle or return to menu.');
        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "Fight Again", –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç initBattle()
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ back-to-menu –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É
     }, 2000);
     // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∏–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
     setTimeout(initBattleQuiz, 4000); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–≤–∏–∑—É –¥–ª—è —Å–ª–µ–¥. –±–æ—è

}

function battleDefeat() {
    if (!battleInProgress) return;
    addBattleMessage('system', `You were defeated by the ${currentEnemy.name}!`);
    endBattleCleanup();

    // Reduce a life
    const userData = loadUserDataBattle();
    if (userData.lives > 0) {
        userData.lives -= 1;
        addBattleMessage('system', `You lost a life! Lives remaining: ${userData.lives}`);
    } else {
        addBattleMessage('system', 'You are out of lives! Come back tomorrow.');
    }
    saveUserDataBattle(userData);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if(backToMenuButton) backToMenuButton.style.display = 'inline-block';

     // –ß–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –∂–∏–∑–Ω–∏)
    setTimeout(() => {
        if (userData.lives > 0) {
             addBattleMessage('system', 'Try again or return to menu.');
             // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "Try Again", –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç initBattle()
             // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∏–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            setTimeout(initBattleQuiz, 4000);
        } else {
            addBattleMessage('system', 'Return to menu.');
        }
    }, 2000);
}

// Calculate and display battle rewards
function calculateRewards() {
    battleRewards = []; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–∞–≥—Ä–∞–¥
    if (!currentEnemy || !currentEnemy.rewards) return;

    const rewardsData = currentEnemy.rewards;

    // Add XP reward message (—É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è –≤ battleVictory)

    // Calculate item drops based on chances
    if (rewardsData.items && Array.isArray(rewardsData.items)) {
        rewardsData.items.forEach(item => {
            if (Math.random() < item.chance) {
                 const reward = { name: item.name, icon: item.icon, type: 'item' };
                 battleRewards.push(reward);
                 addBattleMessage('reward', `${item.icon} Found ${item.name}`);
            }
        });
    }

    // –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ä—É–∂–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5%)
    if (Math.random() < 0.05) {
        const weapons = ['sword', 'staff', 'bow'];
        const randomWeapon = weapons[Math.floor(Math.random() * weapons.length)];
        const weaponIcons = { 'sword': 'üó°Ô∏è', 'staff': 'üîÆ', 'bow': 'üèπ' };
        const weaponName = randomWeapon.charAt(0).toUpperCase() + randomWeapon.slice(1);

        const reward = { name: weaponName, icon: weaponIcons[randomWeapon], type: 'weapon' };
        battleRewards.push(reward);
        addBattleMessage('reward', `${weaponIcons[randomWeapon]} Rare drop: ${weaponName}!`);
    }
     console.log("Calculated rewards:", battleRewards);
}

// --- Main Battle Initialization ---

// This function is called by battle_quiz.js after the quiz is done
window.startBattleInternal = function() {
    console.log("Starting battle internal logic...");
    const userData = loadUserDataBattle();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–∑–Ω–µ–π
    if (userData.lives <= 0) {
        addBattleMessage('system', 'You have no lives left! Come back tomorrow.');
        if(backToMenuButton) backToMenuButton.style.display = 'inline-block'; // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        return;
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
    battleInProgress = true;
    if (battleMessages) battleMessages.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ª–æ–≥
    battleRewards = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã

    // –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∫–≤–∏–∑–∞
    const battleEffect = JSON.parse(localStorage.getItem('battleEffect') || 'null');
    localStorage.removeItem('battleEffect'); // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ–≥–æ
    const playerStats = calculatePlayerStatsBattle(userData, battleEffect);
    playerMaxHealth = playerStats.maxHealth; // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ —ç—Ç–æ—Ç –±–æ–π
    playerCurrentHealth = playerMaxHealth; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∏–≥—Ä–æ–∫–∞
    updateHealthBar(playerHealthElement, playerCurrentHealth, playerMaxHealth);

     // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ñ—Ñ–µ–∫—Ç–µ –∫–≤–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (playerStats.quizEffectMessage) {
        addBattleMessage('system', playerStats.quizEffectMessage);
    }


    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ä–∞–≥–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏
    setupEnemy(userData.level, playerStats.enemySpeedMultiplier);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤—Ä–∞–≥–∞
    updateHealthBar(enemyHealthElement, enemyCurrentHealth, enemyMaxHealth);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–æ—è
    addBattleMessage('system', `A wild ${currentEnemy.name} (Lv. ${currentEnemy.level}) appears!`);
    addBattleMessage('system', `Click on the enemy to attack!`);


    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –≤—Ä–∞–≥–∞
    if (enemyCharacterElement) {
        enemyCharacterElement.removeEventListener('click', playerAttack); // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å
        enemyCharacterElement.addEventListener('click', playerAttack);
    }
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –æ—Ä–±
    if (healingOrbElement) {
         healingOrbElement.removeEventListener('click', healPlayer);
         healingOrbElement.addEventListener('click', healPlayer);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if (enemyAttackInterval) clearInterval(enemyAttackInterval);
    if (healingOrbInterval) clearInterval(healingOrbInterval);

    enemyAttackInterval = setInterval(enemyAttack, currentEnemy.attackSpeed);
    healingOrbInterval = setInterval(showHealingOrb, 4000 + Math.random() * 4000); // 4-8 —Å–µ–∫—É–Ω–¥

     // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –≤–æ –≤—Ä–µ–º—è –±–æ—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     if(backToMenuButton) backToMenuButton.style.display = 'none';

     console.log("Battle started. Player HP:", playerCurrentHealth, "Enemy HP:", enemyCurrentHealth);
};

// --- Initialization when the page loads ---
document.addEventListener('DOMContentLoaded', () => {
    console.log("Battle page DOM loaded.");
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏–≥—Ä–æ–∫–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    updatePlayerAppearanceBattle();

    // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–≤–∏–∑–∞ –ò–ó battle_quiz.js
    if (typeof initBattleQuiz === 'function') {
        initBattleQuiz();
    } else {
        console.error("initBattleQuiz function not found!");
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    window.endBattleCleanup = endBattleCleanup;

});
