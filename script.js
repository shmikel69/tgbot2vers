
// Initialize Telegram Web App compatibility (can run without Telegram too)
let tg = window.Telegram && window.Telegram.WebApp;
if (tg) {
  tg.expand();
  tg.ready(); // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
}

// DOM Elements
const modal = document.getElementById("modal");
const modalMessage = document.getElementById("modal-message");
const closeModal = document.querySelector(".modal .close"); // –£—Ç–æ—á–Ω–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä
const themeButtons = {
    colorful: document.getElementById("colorful-theme-btn"),
    light: document.getElementById("light-theme-btn"),
    dark: document.getElementById("dark-theme-btn")
};

// User data storage
let userData = {}; // –ó–∞–≥—Ä—É–∑–∏–º –∏–∑ localStorage

// Load user data from localStorage if it exists
function loadUserData() {
  const savedData = localStorage.getItem('brainTrainingUserData');
  if (savedData) {
    try {
        userData = JSON.parse(savedData);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if (!userData.stats) userData.stats = {};
        if (!userData.equipment) userData.equipment = { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' };
        if (!userData.pet) userData.pet = { unlocked: false, type: 'cat', color: 'default', accessory: 'none', abilities: {} };
        if (!userData.achievements) userData.achievements = {};
        if (!userData.inventory) userData.inventory = [];
        if (!userData.room) userData.room = { theme: 'default', items: [] };
        if (userData.lastPlayed) userData.lastPlayed = new Date(userData.lastPlayed); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
        else userData.lastPlayed = new Date(0); // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, —Å—Ç–∞–≤–∏–º –æ—á–µ–Ω—å —Å—Ç–∞—Ä—É—é

    } catch (e) {
        console.error("Error parsing user data:", e);
        setDefaultUserData(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –¥–µ—Ñ–æ–ª—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  } else {
      setDefaultUserData();
  }
  console.log("User data loaded:", userData);
}

// Set default user data
function setDefaultUserData() {
    userData = {
        level: 1,
        xp: 0,
        lives: 5,
        lastPlayed: new Date(0), // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
        stats: {
            intelligence: 10, sports: 5, languages: 3,
            energy: 8, creativity: 7, health: 10
        },
        equipment: { skin: 'light', outfit: 'casual', headgear: 'none', weapon: 'none' },
        pet: { unlocked: false, type: 'cat', color: 'default', accessory: 'none', abilities: { loyalty: 50, intelligence: 70, speed: 60, strength: 40 } },
        achievements: { memoryMaster: false, mathWizard: false, dailyStreak: false },
        inventory: [],
        room: { theme: 'default', items: [] }
    };
    saveUserData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
}


// Save user data to localStorage
function saveUserData() {
    try {
        localStorage.setItem('brainTrainingUserData', JSON.stringify(userData));
    } catch (e) {
        console.error("Error saving user data:", e);
    }
}

// Initialize the app
function initApp() {
  loadUserData();

  // Check for daily life regain
  const now = new Date();
  const lastPlayedDate = userData.lastPlayed;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lastPlayedDate - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–∞—Ç–∞
  if (lastPlayedDate instanceof Date && !isNaN(lastPlayedDate)) {
      const oneDay = 24 * 60 * 60 * 1000;
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –Ω–∞—á–∞–ª–æ –¥–Ω—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const lastPlayedDayStart = new Date(lastPlayedDate.getFullYear(), lastPlayedDate.getMonth(), lastPlayedDate.getDate());
      const nowDayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());

      const daysSinceLastPlayed = Math.floor((nowDayStart - lastPlayedDayStart) / oneDay);

      if (daysSinceLastPlayed > 0) {
          console.log(`Days since last played: ${daysSinceLastPlayed}. Regaining life.`);
          userData.lives = Math.min(5, (userData.lives || 0) + 1); // Regain 1 life per day, max 5
          userData.lastPlayed = now; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
          saveUserData();
      }
  } else {
      // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      console.warn("Invalid lastPlayed date found, resetting.");
      userData.lastPlayed = now;
      saveUserData();
  }


  // Load theme preference
  loadThemePreference();
}

// Show modal dialog
function showModal(message) {
  modalMessage.textContent = message;
  modal.style.display = "block";
}

// Close modal when clicking on X
if (closeModal) {
    closeModal.addEventListener("click", () => {
      if (modal) modal.style.display = "none";
    });
}

// Close modal when clicking outside
window.addEventListener("click", (event) => {
  if (event.target === modal) {
    modal.style.display = "none";
  }
});

// Handle icon clicks
document.querySelectorAll(".icon").forEach(icon => { // –£–±—Ä–∞–Ω .battle-icon, —Ç.–∫. –æ–Ω —Ç–µ–ø–µ—Ä—å .icon
  icon.addEventListener("click", function() {
    const action = this.getAttribute("data-action");
    console.log("Icon clicked:", action); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (action === "inventory") {
      showModal("üéí Inventory is under development. Here you'll manage your items, artifacts, and collectibles.");
    } else if (action === "games") {
      window.location.href = "index.html";
    } else if (action === "room") {
      window.location.href = "room.html";
    } else if (action === "stats") {
      window.location.href = "stats.html";
    } else if (action === "battle") {
      window.location.href = "battle.html";
    }
  });
});

// Handle START buttons
document.querySelectorAll(".start-button").forEach(button => {
  button.addEventListener("click", function() {
    const gameType = this.getAttribute("data-game");
    if (gameType === "memory") {
       // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ, intro –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
      window.location.href = "memory_game.html";
    } else if (gameType === "math") {
       // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–≥—Ä–µ, intro –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      window.location.href = "math_game.html";
    }
  });
});

// Theme switcher functionality
function applyTheme(themeName) {
    document.body.className = themeName + '-theme'; // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –∫ body
    localStorage.setItem("preferred-theme", themeName);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å selected —É –∫–Ω–æ–ø–æ–∫
    Object.values(themeButtons).forEach(btn => {
        if (btn) btn.classList.remove('selected');
    });
    const selectedButton = themeButtons[themeName];
    if (selectedButton) {
        selectedButton.classList.add('selected');
    }
    console.log("Theme applied:", themeName);
}


if(themeButtons.colorful) themeButtons.colorful.addEventListener("click", () => applyTheme('colorful'));
if(themeButtons.light) themeButtons.light.addEventListener("click", () => applyTheme('light'));
if(themeButtons.dark) themeButtons.dark.addEventListener("click", () => applyTheme('dark'));


// Load saved theme preference
function loadThemePreference() {
  const savedTheme = localStorage.getItem("preferred-theme");
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –∏–ª–∏ —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  applyTheme(savedTheme || "colorful");
}

// Initialize the app when the page loads
window.onload = function() {
  initApp();
};
